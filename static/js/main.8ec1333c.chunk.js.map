{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","rows","value","onChange","event","console","log","target","backgroundColor","str","document","getElementById","n","toUpperCase","showAlert","toLowerCase","alert","navigator","clipboard","writeText","innerText","split","filter","element","length","join","Alert","height","role","words","lower","charAt","slice","capital","msg","prototypes","PropTypes","string","defaultProps","App","setmode","setAlert","message","setTimeout","about","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8ec1333c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {/*TextUtils*/} {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            \r\n         \r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-outline-success\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form> */}\r\n          <div className=\"form-check form-switch mx-3\">\r\n            <input className=\"form-check-input \" type=\"checkbox\" id=\"flexSwitchCheckDefault\" onClick={props.toggleMode} />\r\n            <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\" id=\"modeText\">Dark Mode</label>\r\n          </div>\r\n         \r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n// here we have defined our protypes that in place of title only string is accepted . it is optional but it is a good [ratice tp define these things as it will help in debugging\r\nNavbar.prototypes = {\r\n  title: PropTypes.string\r\n  \r\n};\r\n//setting default value of title\r\nNavbar.defaultProps = {\r\n  title: \"Set title here\"\r\n  \r\n};\r\n","//concept of state\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n  const handleUpClick = () => {\r\n\r\n    let str = document.getElementById(\"exampleFormControlTextarea1\").value;\r\n    console.log(str+\"hey\")\r\n    let n = str.toUpperCase();\r\n    setText(n);\r\n    str.toUpperCase();\r\n    if(str!==\"\"){\r\n     props.showAlert(\"converted to upperCase \", \"success\") \r\n    }\r\n    else{\r\n      props.showAlert(\"no text is there which can be converted to uppercase\",\"warning\")\r\n    }\r\n  }\r\n  const handleLoClick = () => {\r\n\r\n    let str = document.getElementById(\"exampleFormControlTextarea1\").value;\r\n    let n = str.toLowerCase();\r\n    setText(n);\r\n    // str.toLowerCase();\r\n    if(str!==\"\"){\r\n      props.showAlert(\"converted to lowerCase \", \"success\") \r\n     }\r\n     else{\r\n      props.showAlert(\"no text is there which can be converted to lowerCase\",\"warning\")\r\n    }\r\n  }\r\n  const handleClearClick = () => {\r\n\r\n    let str = document.getElementById(\"exampleFormControlTextarea1\").value;\r\n    let n = str;\r\n    n = \"\";\r\n    if(str!==\"\"){\r\n      props.showAlert(\"Text Cleared\", \"success\") \r\n     }\r\n     else{\r\n      props.showAlert(\"nothing to clear\",\"success\")\r\n     }\r\n    setText(n);\r\n    // str.toLowerCase();\r\n\r\n\r\n  }\r\n  const handleCopyClick = () => {\r\n\r\n    let str = document.getElementById(\"exampleFormControlTextarea1\");\r\n    if (str.value === \"\") {\r\n      alert(\"no text to copy\")\r\n    }\r\n    else {\r\n      navigator.clipboard.writeText(str.value);\r\n      // alert(\"text copied\"); \r\n      let copy = document.getElementById(\"copy\");\r\n      copy.innerText = \"Copied\";\r\n      props.showAlert(\"Text Copied\",\"success\");\r\n    }\r\n\r\n\r\n  }\r\n\r\n\r\n  const handleOnChange = (event) => {\r\n    console.log(\"onchange \");\r\n    setText(event.target.value)\r\n  }\r\n\r\n\r\n\r\n  //declaring a state\r\n\r\n  const [text, setText] = useState(\"Enter ur text here\")\r\n  //now to change the text the synytax is as follows\r\n  // setText(\"text changed\");\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}>\r\n        <h1>{props.heading} </h1>\r\n        <div className=\"mb-3\">\r\n\r\n          <textarea\r\n            className=\"form-control\" id=\"exampleFormControlTextarea1\"\r\n            rows=\"8\" value={text} onChange={handleOnChange} style={{ backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\", color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}></textarea>\r\n        </div>\r\n        <div className=\"container\">\r\n          <button className=\"btn btn-primary my-2\" onClick={handleUpClick}>Uppercase</button>\r\n          <button className=\"btn btn-primary mx-2 my-2\" onClick={handleLoClick}>Lowercase</button>\r\n          <button className=\"btn btn-primary mx-2 my-2\" onClick={handleClearClick}>Clear all</button>\r\n          <button className=\"btn btn-primary mx-2 my-2\" id=\"copy\" onClick={handleCopyClick}>Copy Textl</button></div>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h1 style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}>Your Text Summary</h1>\r\n        <p style={{ color: props.mode === \"dark\" ? \"white\" : \"#042743\" }}>{text.split(\" \").filter((element) => {\r\n          return element.length !== 0\r\n        }).length} words and  {text.split(\" \").join(\"\").length} characters</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n//defining type of heading\r\nTextForm.prototypes = {\r\n  heading: PropTypes.string\r\n}\r\n//default baaviour\r\nTextForm.defaultProps = {\r\n  heading: \"Enter ur heading here\"\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capital=(words)=>{\r\nconst lower=words.toLowerCase()\r\nreturn lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        <div className=\"content\" style={{\r\n            height:\"50px\"\r\n        }}>\r\n       { props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} id =\"animate\"role=\"alert\" >\r\n        <strong>{capital(props.alert.type)}</strong> : {props.alert.msg}\r\n       \r\n      </div>}</div>\r\n    )\r\n}\r\n","// import logo from './logo.svg';\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from \"react\";              //using for dark mode\nimport Alert from './components/Alert';\n\n\n// import {\n//   BrowserRouter as Router,\n//   Route,\n\n//   Switch\n// } from 'react-router-dom';\n\n\nfunction App() {\n  const [mode, setmode] = useState(\"light\");  //for dark mode\n  const [alert, setAlert] = useState(null);   //we will pass an object to set alert\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n\n  }\n\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setmode(\"dark\");\n      document.getElementById(\"modeText\").innerText = \"Light Mode\"\n      document.getElementById(\"modeText\").style.color = \"white\";\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark Mode Is Enabled\", \"success\")\n    }\n    else {\n      setmode(\"light\");\n      document.getElementById(\"modeText\").innerText = \"Dark Mode\"\n      document.getElementById(\"modeText\").style.color = \"black\";\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode Is Enabled\", \"success\")\n    }\n  }\n\n\n\n  return (\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n    <>\n      {/* <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"/\">TextUtils</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\n        </li>\n        <li className=\"nav-item\">\n          <a className=\"nav-link\" href=\"/\">About</a>\n        </li>\n       \n       \n      </ul>\n      <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form>\n    </div>\n  </div>\n</nav> */}\n\n      {/* //////////////////////////////Navbar is inserted from here//////////////////////// */}\n\n\n      {/* now we will not put navbar directly in pur app .js file we will import it from components folder named Navbar,js  */}\n      {/* <Router> */}\n        <Navbar title={<b>Shabdh Modifier</b>} about=\"About Us\" mode={mode} toggleMode={toggleMode}></Navbar>\n        <Alert alert={alert}></Alert>\n        <div className=\"container my-3\">\n{/* \n          <Switch> */}\n           \n            {/* <Route exact path=\"/\"> */}\n              <TextForm heading=\"iNsert Text bElow\" mode={mode} showAlert={showAlert}></TextForm>\n            {/* </Route> */}\n          {/* </Switch> */}\n\n\n\n\n        </div>\n      {/* </Router> */}\n\n\n\n\n\n\n\n\n\n\n\n\n\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}